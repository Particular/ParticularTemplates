---------------------------------------------------------------
Messages.cs
---------------------------------------------------------------

using NServiceBus;

public class OrderPlaced : IEvent
{
    public string CorrelationId { get; set; }
}

public class OrderBilled : IEvent
{
    public string CorrelationId { get; set; }
}
---------------------------------------------------------------
Program.cs
---------------------------------------------------------------
Contents ignored by test
---------------------------------------------------------------
Saganet48.csproj
---------------------------------------------------------------
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net48</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="NServiceBus" Version="(VERSION)" />
    <PackageReference Include="NServiceBus.Extensions.Hosting" Version="(VERSION)" />
  </ItemGroup>

</Project>
---------------------------------------------------------------
ShippingPolicy.cs
---------------------------------------------------------------
using System;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using NServiceBus;

namespace Saganet48
{
    class ShippingPolicy : Saga<ShippingPolicyData>,
        IAmStartedByMessages<OrderPlaced>,
        IAmStartedByMessages<OrderBilled>,
        IHandleTimeouts<MyCustomTimeout>
    {
        private readonly ILogger log;

        public ShippingPolicy(ILogger<ShippingPolicy> log)
        {
            this.log = log;
        }

        protected override void ConfigureHowToFindSaga(SagaPropertyMapper<ShippingPolicyData> mapper)
        {
            // https://docs.particular.net/nservicebus/sagas/message-correlation
            mapper.MapSaga(saga => saga.CorrelationId)
                .ToMessage<OrderPlaced>(message => message.CorrelationId)
                .ToMessage<OrderBilled>(message => message.CorrelationId);
        }

        public async Task Handle(OrderPlaced message, IMessageHandlerContext context)
        {
            // Business logic here
        }

        public async Task Handle(OrderBilled message, IMessageHandlerContext context)
        {
            // Update saga data: https://docs.particular.net/nservicebus/sagas/#long-running-means-stateful
            // this.Data.Property = ...

            // Sending commands: https://docs.particular.net/nservicebus/messaging/send-a-message#inside-the-incoming-message-processing-pipeline
            // await context.Send(...);

            // Publishing events https://docs.particular.net/nservicebus/messaging/publish-subscribe/publish-handle-event
            // await context.Publish(...);

            // Request a timeout: https://docs.particular.net/nservicebus/sagas/timeouts
            // await RequestTimeout<MyCustomTimeout>(context, TimeSpan.FromMinutes(10));

            // Ending a saga: https://docs.particular.net/nservicebus/sagas/#ending-a-saga
            // MarkAsComplete();
        }

        public async Task Timeout(MyCustomTimeout timeout, IMessageHandlerContext context)
        {
            // Remove if saga does not require timeouts
        }
    }

    class ShippingPolicyData : ContainSagaData
    {
        public string CorrelationId { get; set; }
        // Other properties
    }

    class MyCustomTimeout
    {
        // Optional extra properties
    }
}

