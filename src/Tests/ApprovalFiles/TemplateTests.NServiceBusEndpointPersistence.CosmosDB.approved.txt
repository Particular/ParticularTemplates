---------------------------------------------------------------
NServiceBusEndpointPersistenceCosmosDB.csproj
---------------------------------------------------------------
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="NServiceBus" Version="(VERSION)" />
    <PackageReference Include="NServiceBus.Extensions.Hosting" Version="(VERSION)" />
    <PackageReference Include="NServiceBus.Persistence.CosmosDB" Version="(VERSION)" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="appsettings*.json" CopyToOutputDirectory="PreserveNewest" />
    <None Remove="appsettings*.json" />
    <ProjectCapability Include="DynamicFileNestingEnabled" />
  </ItemGroup>

</Project>
---------------------------------------------------------------
Program.cs
---------------------------------------------------------------
using Microsoft.Azure.Cosmos;
using Microsoft.Extensions.Hosting;

var builder = Host.CreateApplicationBuilder(args);

builder.UseNServiceBus(() =>
{
    // TODO: consider moving common endpoint configuration into a shared project
    // for use by all endpoints in the system

    var endpointConfiguration = new EndpointConfiguration("NServiceBusEndpointPersistenceCosmosDB");

    // Learning Transport: https://docs.particular.net/transports/learning/
    var routing = endpointConfiguration.UseTransport(new LearningTransport());

    // Define routing for commands: https://docs.particular.net/nservicebus/messaging/routing#command-routing
    // routing.RouteToEndpoint(typeof(MessageType), "DestinationEndpointForType");
    // routing.RouteToEndpoint(typeof(MessageType).Assembly, "DestinationForAllCommandsInAssembly");

    // Cosmos DB Persistence: https://docs.particular.net/persistence/cosmosdb/
    var persistence = endpointConfiguration.UsePersistence<CosmosPersistence>();
    persistence.CosmosClient(new CosmosClient("CONNECTION_STRING"));
    persistence.DatabaseName("DATABASE_NAME");

    // Message serialization
    endpointConfiguration.UseSerialization<SystemJsonSerializer>();

    endpointConfiguration.DefineCriticalErrorAction(OnCriticalError);

    // Installers are useful in development. Consider disabling in production.
    // https://docs.particular.net/nservicebus/operations/installers
    endpointConfiguration.EnableInstallers();

    return endpointConfiguration;
});

var app = builder.Build();
app.Run();

static async Task OnCriticalError(ICriticalErrorContext context, CancellationToken cancellationToken)
{
    // TODO: decide if stopping the endpoint and exiting the process is the best response to a critical error
    // https://docs.particular.net/nservicebus/hosting/critical-errors
    // and consider setting up service recovery
    // https://docs.particular.net/nservicebus/hosting/windows-service#installation-restart-recovery
    try
    {
        await context.Stop(cancellationToken);
    }
    finally
    {
        FailFast($"Critical error, shutting down: {context.Error}", context.Exception);
    }
}

static void FailFast(string message, Exception exception)
{
    try
    {
        // TODO: decide what kind of last resort logging is necessary
        // TODO: when using an external logging framework it is important to flush any pending entries prior to calling FailFast
        // https://docs.particular.net/nservicebus/hosting/critical-errors#when-to-override-the-default-critical-error-action
    }
    finally
    {
        Environment.FailFast(message, exception);
    }
}

---------------------------------------------------------------
launchSettings.json
---------------------------------------------------------------
{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "profiles": {
    "NServiceBusEndpointPersistenceCosmosDB": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "environmentVariables": {
        "DOTNET_ENVIRONMENT": "Development"
      }
    }
  }
}

---------------------------------------------------------------
appsettings.Development.json
---------------------------------------------------------------
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  }
}

---------------------------------------------------------------
appsettings.json
---------------------------------------------------------------
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  }
}

