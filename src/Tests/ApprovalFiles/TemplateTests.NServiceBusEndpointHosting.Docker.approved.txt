---------------------------------------------------------------
NServiceBusEndpointHostingDocker.csproj
---------------------------------------------------------------
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <EnableSdkContainerSupport>true</EnableSdkContainerSupport>
  </PropertyGroup>

  <!--
  Wildcard versions used to ensure templated projects receive newest versions.
  Consider changing wildcard version references to explicit versions.
  -->
  <ItemGroup>
    <PackageReference Include="NServiceBus" Version="(VERSION)" />
    <PackageReference Include="NServiceBus.Extensions.Hosting" Version="(VERSION)" />
  </ItemGroup>

  <ItemGroup>
    <None Update="license.xml" CopyToOutputDirectory="PreserveNewest" />
    <Content Include="appsettings*.json" CopyToOutputDirectory="PreserveNewest" />
    <None Remove="appsettings*.json" />
    <ProjectCapability Include="DynamicFileNestingEnabled" />
  </ItemGroup>

</Project>
---------------------------------------------------------------
Program.cs
---------------------------------------------------------------
using Microsoft.Extensions.Hosting;

// To create a docker container, use the following command: dotnet publish /t:PublishContainer
// See https://learn.microsoft.com/en-us/dotnet/core/docker/publish-as-container?pivots=dotnet-8-0#publish-net-app for details
var builder = Host.CreateApplicationBuilder(args);

// TODO: consider moving common endpoint configuration into a shared project
// for use by all endpoints in the system

var endpointConfiguration = new EndpointConfiguration("NServiceBusEndpointHostingDocker");

// Learning Transport: https://docs.particular.net/transports/learning/
var routing = endpointConfiguration.UseTransport(new LearningTransport());

// Define routing for commands: https://docs.particular.net/nservicebus/messaging/routing#command-routing
// routing.RouteToEndpoint(typeof(MessageType), "DestinationEndpointForType");
// routing.RouteToEndpoint(typeof(MessageType).Assembly, "DestinationForAllCommandsInAssembly");

// Learning Persistence: https://docs.particular.net/persistence/learning/
endpointConfiguration.UsePersistence<LearningPersistence>();

// Message serialization
endpointConfiguration.UseSerialization<SystemJsonSerializer>();

endpointConfiguration.DefineCriticalErrorAction(OnCriticalError);

// Installers are useful in development. Consider disabling in production.
// https://docs.particular.net/nservicebus/operations/installers
endpointConfiguration.EnableInstallers();

builder.UseNServiceBus(endpointConfiguration);

var app = builder.Build();
app.Run();

static async Task OnCriticalError(ICriticalErrorContext context, CancellationToken cancellationToken)
{
    // TODO: decide if stopping the endpoint and exiting the process is the best response to a critical error
    // https://docs.particular.net/nservicebus/hosting/critical-errors
    // and consider setting up service recovery
    // https://docs.particular.net/nservicebus/hosting/windows-service#installation-restart-recovery
    try
    {
        await context.Stop(cancellationToken);
    }
    finally
    {
        FailFast($"Critical error, shutting down: {context.Error}", context.Exception);
    }
}

static void FailFast(string message, Exception exception)
{
    try
    {
        // TODO: decide what kind of last resort logging is necessary
        // TODO: when using an external logging framework it is important to flush any pending entries prior to calling FailFast
        // https://docs.particular.net/nservicebus/hosting/critical-errors#when-to-override-the-default-critical-error-action
    }
    finally
    {
        Environment.FailFast(message, exception);
    }
}

---------------------------------------------------------------
launchSettings.json
---------------------------------------------------------------
{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "profiles": {
    "NServiceBusEndpointHostingDocker": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "environmentVariables": {
        "DOTNET_ENVIRONMENT": "Development"
      }
    }
  }
}

---------------------------------------------------------------
appsettings.Development.json
---------------------------------------------------------------
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  }
}

---------------------------------------------------------------
appsettings.json
---------------------------------------------------------------
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  }
}

---------------------------------------------------------------
license.xml
---------------------------------------------------------------
<!-- this file needs to be replaced with your license file-->
