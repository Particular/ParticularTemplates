---------------------------------------------------------------
Messages.cs
---------------------------------------------------------------

using NServiceBus;

public class OrderPlaced : IEvent
{
    public string CorrelationId { get; set; }
}

public class OrderBilled : IEvent
{
    public string CorrelationId { get; set; }
}
---------------------------------------------------------------
Program.cs
---------------------------------------------------------------
using System;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using NServiceBus;

namespace Saga
{
    static class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        static IHostBuilder CreateHostBuilder(string[] args)
        {
            return Host.CreateDefaultBuilder(args)
                .UseConsoleLifetime()
                .ConfigureLogging(logging =>
                {
                    logging.AddConsole();
                })
                .UseNServiceBus(ctx =>
                {
                    // TODO: consider moving common endpoint configuration into a shared project
                    // for use by all endpoints in the system

                    var endpointConfiguration = new EndpointConfiguration("Saga");

                    // Learning Transport: https://docs.particular.net/transports/learning/
                    var routing = endpointConfiguration.UseTransport(new LearningTransport());

                    // Define routing for commands: https://docs.particular.net/nservicebus/messaging/routing#command-routing
                    // routing.RouteToEndpoint(typeof(MessageType), "DestinationEndpointForType");
                    // routing.RouteToEndpoint(typeof(MessageType).Assembly, "DestinationForAllCommandsInAsembly");

                    // Learning Persistence: https://docs.particular.net/persistence/learning/
                    endpointConfiguration.UsePersistence<LearningPersistence>();

                    // Message serialization
                    endpointConfiguration.UseSerialization<NewtonsoftJsonSerializer>();

                    endpointConfiguration.DefineCriticalErrorAction(OnCriticalError);

                    // Installers are useful in development. Consider disabling in production.
                    // https://docs.particular.net/nservicebus/operations/installers
                    endpointConfiguration.EnableInstallers();

                    return endpointConfiguration;
                });
        }

        static async Task OnCriticalError(ICriticalErrorContext context, CancellationToken cancellationToken)
        {
            // TODO: decide if stopping the endpoint and exiting the process is the best response to a critical error
            // https://docs.particular.net/nservicebus/hosting/critical-errors
            // and consider setting up service recovery
            // https://docs.particular.net/nservicebus/hosting/windows-service#installation-restart-recovery
            try
            {
                await context.Stop(cancellationToken);
            }
            finally
            {
                FailFast($"Critical error, shutting down: {context.Error}", context.Exception);
            }
        }

        static void FailFast(string message, Exception exception)
        {
            try
            {
                // TODO: decide what kind of last resort logging is necessary
                // TODO: when using an external logging framework it is important to flush any pending entries prior to calling FailFast
                // https://docs.particular.net/nservicebus/hosting/critical-errors#when-to-override-the-default-critical-error-action
            }
            finally
            {
                Environment.FailFast(message, exception);
            }
        }
    }
}

---------------------------------------------------------------
Saga.csproj
---------------------------------------------------------------
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net7.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Hosting.WindowsServices" Version="(VERSION)" />
    <PackageReference Include="NServiceBus" Version="(VERSION)" />
    <PackageReference Include="NServiceBus.Extensions.Hosting" Version="(VERSION)" />
    <PackageReference Include="NServiceBus.Newtonsoft.Json" Version="(VERSION)" />
  </ItemGroup>

</Project>
---------------------------------------------------------------
ShippingPolicy.cs
---------------------------------------------------------------
using System;
using Microsoft.Extensions.Logging;
using NServiceBus;
using System.Threading.Tasks;

namespace Handlers
{
    class ShippingPolicy : Saga<ShippingPolicyData>,
        IAmStartedByMessages<OrderPlaced>,
        IAmStartedByMessages<OrderBilled>,
        IHandleTimeouts<MyCustomTimeout>
    {
        private readonly ILogger log;

        public ShippingPolicy(ILogger<ShippingPolicy> log)
        {
            this.log = log;
        }

        protected override void ConfigureHowToFindSaga(SagaPropertyMapper<ShippingPolicyData> mapper)
        {
            // https://docs.particular.net/nservicebus/sagas/message-correlation
            mapper.MapSaga(saga => saga.CorrelationId)
                .ToMessage<OrderPlaced>(message => message.CorrelationId)
                .ToMessage<OrderBilled>(message => message.CorrelationId);
        }

        public async Task Handle(OrderPlaced message, IMessageHandlerContext context)
        {
            // Business logic here
        }

        public async Task Handle(OrderBilled message, IMessageHandlerContext context)
        {
            // Update saga data: https://docs.particular.net/nservicebus/sagas/#long-running-means-stateful
            // this.Data.Property = ...

            // Sending commands: https://docs.particular.net/nservicebus/messaging/send-a-message#inside-the-incoming-message-processing-pipeline
            // await context.Send(...);

            // Publishing events https://docs.particular.net/nservicebus/messaging/publish-subscribe/publish-handle-event
            // await context.Publish(...);

            // Request a timeout: https://docs.particular.net/nservicebus/sagas/timeouts
            // await RequestTimeout<MyCustomTimeout>(context, TimeSpan.FromMinutes(10));

            // Ending a saga: https://docs.particular.net/nservicebus/sagas/#ending-a-saga
            // MarkAsComplete();
        }

        public async Task Timeout(MyCustomTimeout timeout, IMessageHandlerContext context)
        {
            // Remove if saga does not require timeouts
        }
    }

    class ShippingPolicyData : ContainSagaData
    {
        public string CorrelationId { get; set; }
        // Other properties
    }

    class MyCustomTimeout
    {
        // Optional extra properties
    }
}

